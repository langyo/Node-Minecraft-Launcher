////////////////////////////////////////////////////////////////
//SimpleSync - A simple sync function-wrapper for NodeJS
//Author:	Willow Zhu(willow@mv3.org) @West Van
//History:  14-4-17
//
////////////////////////////////////////////////////////////////

var Fiber = require('fibers');

////////////////////////////////////////////////////////////////
//General sync modules
////////////////////////////////////////////////////////////////
exports.block = function(cb) {
	var that = this;
	Fiber(function(){
		cb.call(that);
	}).run();
}

exports.wait = function(cb) {
	if (typeof cb == 'function')
		cb.call(this);
	return Fiber.yield(cb);
}

exports.cb = function() {
	var fiber = Fiber.current;
	var kwds  = Array.prototype.slice.call(arguments);
	if (fiber.__syncInfo == null)
		fiber.__syncInfo = {called: 0, returned: 0, results: []};
	var info  = fiber.__syncInfo;
	var index = info.called;
	info.called++;
	return function() {
		// Wrapping in nextTick as a safe measure against not asynchronous usage.
		var args = Array.prototype.slice.call(arguments);
		process.nextTick(function() {
			var result;
			if (!kwds.length) {
				result = args;
			} else {
				result = {};
				kwds.forEach(function(kwd, i) {
					result[kwd] = args[i]
				})
			}
			//Check all of callback returned?
			info.returned++;
			info.results[index] = result;
			if (info.returned == info.called) {
				if (info.returned != 1)
					result = info.results;
				fiber.__syncInfo = null;
				fiber.run(result);
				return;
			}
		});
	}
}